마킹정보3$불량명 <- str_replace(마킹정보3$불량명,"선이물","이물(선)")
마킹정보<-rbind(마킹정보,마킹정보1,마킹정보2,마킹정보3)
마킹정보$불량명<-str_replace(마킹정보$불량명,"군집,S/C","군집.S/C")
마킹정보<-subset(마킹정보,select=c("camerano","강약구분","불량명","마킹유무"))
Xsimulation_v1 <- merge(Xsimulation_v1,마킹정보,by =c("camerano","강약구분","불량명"),all.x = TRUE)
Xsimulation_v1$Size<-as.numeric(Xsimulation_v1$Size)
Xsimulation_v1$Value<-as.numeric(Xsimulation_v1$Value)
a<-Xsimulation_v1
return(a)
}      ###  POP RAWdata 가공        a:raw b:마킹정보
Yield2<-function(a,c,d,e,f,g,h){
a <- subset(a, 마킹유무==c("Y"))  ##마킹유무구분
a1 <-subset(a,camerano=="크로스"|camerano=="크로스1"|camerano=="정반사A"|camerano=="투영"|camerano=="슬릿반사"|camerano=="사선경계")
잘린마킹1<- a1
잘린마킹2<- a1
잘린마킹3<- a1
잘린마킹4<- a1
잘린마킹1$Y.좌표<-잘린마킹1$Y.좌표-11
잘린마킹2$Y.좌표<-잘린마킹2$Y.좌표-11
잘린마킹3$Y.좌표<-잘린마킹3$Y.좌표+11
잘린마킹4$Y.좌표<-잘린마킹4$Y.좌표+11
잘린마킹1$X.좌표<-잘린마킹1$X.좌표-10
잘린마킹2$X.좌표<-잘린마킹2$X.좌표+10
잘린마킹3$X.좌표<-잘린마킹3$X.좌표-10
잘린마킹4$X.좌표<-잘린마킹4$X.좌표+10
잘린마킹5<-rbind(잘린마킹1,잘린마킹2,잘린마킹3,잘린마킹4)
잘린마킹5<-mutate(잘린마킹5,마킹유무=c("C"))
a2 <-subset(a,camerano=="미분투과"|camerano=="정반사B"|camerano=="정투과"|camerano=="크로스2")
잘린마킹1<- a2
잘린마킹2<- a2
잘린마킹3<- a2
잘린마킹4<- a2
잘린마킹1$Y.좌표<-잘린마킹1$Y.좌표-6.5
잘린마킹2$Y.좌표<-잘린마킹2$Y.좌표-6.5
잘린마킹3$Y.좌표<-잘린마킹3$Y.좌표+6.5
잘린마킹4$Y.좌표<-잘린마킹4$Y.좌표+6.5
잘린마킹1$X.좌표<-잘린마킹1$X.좌표-10
잘린마킹2$X.좌표<-잘린마킹2$X.좌표+10
잘린마킹3$X.좌표<-잘린마킹3$X.좌표-10
잘린마킹4$X.좌표<-잘린마킹4$X.좌표+10
잘린마킹6<-rbind(잘린마킹1,잘린마킹2,잘린마킹3,잘린마킹4)
잘린마킹6<-mutate(잘린마킹6,마킹유무=c("C"))
Xsimulation_v1<-rbind(a,잘린마킹5,잘린마킹6)
widths<-c
rolllengths<-d
modelx<-e
modely<-f
lengths<-rolllengths*1000
col<-g
nulling<-h
nulling1<-(widths-col*modelx)/2
Xsimulation_v1$ncol<-cut(Xsimulation_v1$`X.좌표`,breaks=c(0,seq(nulling,(widths-nulling1),modelx),widths),include.lowest=FALSE,right=TRUE,label=c("rnulling",as.character(seq(1,col,1)),"lnulling"))
row<-seq(0,lengths,modely)
length(seq(0,lengths,modely))
Xsimulation_v1$nrow<-cut(Xsimulation_v1$`Y.좌표`,breaks=c(seq(0,lengths,modely)),include.lowest=FALSE,right=TRUE,label=c(as.character(seq(1,(length(seq(1,(lengths),modely))-1),1))))
행<-seq(1,col,1)
열<-seq(1,length(seq(1,(lengths),modely)),1)
chip<-merge(행,열)
names(chip)<-c("ncol","nrow")
chip1 <- merge(chip,Xsimulation_v1,by =c("ncol","nrow"),all.x = TRUE)
전체chip수량<-(col*length(seq(1,(lengths),modely)))
수율<-sum(is.na(chip1$camerano))/(col*length(seq(1,(lengths),modely)))*100
chip1<-mutate(chip1,마킹수율= ifelse(is.na(chip1$camerano),1,0))
열별수율<-data.frame(
chip1%>%
group_by(ncol)%>%
summarise( 수량=length(seq(1,(lengths),modely)),
수율=sum(마킹수율)/length(seq(1,(lengths),modely))*100   ))
열별수율<-rbind(열별수율,data.frame(열=c("총합"),재단수량=sum(열별수율$재단수량),수율=(sum(열별수율$양품량)/sum(열별수율$재단수량)*100),양품량=sum(열별수율$양품량) ))
return(열별수율)
}
a <- read_csv("D:/#.Secure Work Folder/rawdata/roll/das_defect_raw_20170329DC01017.csv")    ##<-----------수정필요
##POP 자동검사 rawdata (POP에서 다운받아야함)
b <- read_excel("D:/#.Secure Work Folder/rawdata/parameter/Test.xls")            ##<-----------수정필요
##마킹정보 data (DAS에서 다운받아야함, 그리고 마킹이랑 비교해볼것 )
a1<-data.frame(RAWchange2(a,b))
c<-2200       ##<-----------수정필요(소자폭mm)
d<-1240         ##<-----------수정필요(원단길이m)
e<-818.60         ##<-----------수정필요(모델 TD mm)
f<-1448.10          ##<-----------수정필요(모델 MD mm)
g<-1                  ##<-----------수정필요(재단열 수량)
h<-100                 ##<-----------수정필요(왼쪽nulling mm)
Yield2(a1,c,d,e,f,g,h)     ### 위에꺼 입력 다했으면 여기 클릭 하고 Ctrl+enter 출력값(chip수량. 예상마킹수율, 열별수율)
a<-data.frame(RAWchange2(a,b))
a <- subset(a, 마킹유무==c("Y"))  ##마킹유무구분
a1 <-subset(a,camerano=="크로스"|camerano=="크로스1"|camerano=="정반사A"|camerano=="투영"|camerano=="슬릿반사"|camerano=="사선경계")
잘린마킹1<- a1
잘린마킹2<- a1
잘린마킹3<- a1
잘린마킹4<- a1
잘린마킹1$Y.좌표<-잘린마킹1$Y.좌표-11
잘린마킹2$Y.좌표<-잘린마킹2$Y.좌표-11
잘린마킹3$Y.좌표<-잘린마킹3$Y.좌표+11
잘린마킹4$Y.좌표<-잘린마킹4$Y.좌표+11
잘린마킹1$X.좌표<-잘린마킹1$X.좌표-10
잘린마킹2$X.좌표<-잘린마킹2$X.좌표+10
잘린마킹3$X.좌표<-잘린마킹3$X.좌표-10
잘린마킹4$X.좌표<-잘린마킹4$X.좌표+10
잘린마킹5<-rbind(잘린마킹1,잘린마킹2,잘린마킹3,잘린마킹4)
잘린마킹5<-mutate(잘린마킹5,마킹유무=c("C"))
a2 <-subset(a,camerano=="미분투과"|camerano=="정반사B"|camerano=="정투과"|camerano=="크로스2")
잘린마킹1<- a2
잘린마킹2<- a2
잘린마킹3<- a2
잘린마킹4<- a2
잘린마킹1$Y.좌표<-잘린마킹1$Y.좌표-6.5
잘린마킹2$Y.좌표<-잘린마킹2$Y.좌표-6.5
잘린마킹3$Y.좌표<-잘린마킹3$Y.좌표+6.5
잘린마킹4$Y.좌표<-잘린마킹4$Y.좌표+6.5
잘린마킹1$X.좌표<-잘린마킹1$X.좌표-10
잘린마킹2$X.좌표<-잘린마킹2$X.좌표+10
잘린마킹3$X.좌표<-잘린마킹3$X.좌표-10
잘린마킹4$X.좌표<-잘린마킹4$X.좌표+10
잘린마킹6<-rbind(잘린마킹1,잘린마킹2,잘린마킹3,잘린마킹4)
잘린마킹6<-mutate(잘린마킹6,마킹유무=c("C"))
Xsimulation_v1<-rbind(a,잘린마킹5,잘린마킹6)
widths<-c
rolllengths<-d
modelx<-e
modely<-f
lengths<-rolllengths*1000
col<-g
nulling<-h
nulling1<-(widths-col*modelx)/2
Xsimulation_v1$ncol<-cut(Xsimulation_v1$`X.좌표`,breaks=c(0,seq(nulling,(widths-nulling1),modelx),widths),include.lowest=FALSE,right=TRUE,label=c("rnulling",as.character(seq(1,col,1)),"lnulling"))
row<-seq(0,lengths,modely)
length(seq(0,lengths,modely))
Xsimulation_v1$nrow<-cut(Xsimulation_v1$`Y.좌표`,breaks=c(seq(0,lengths,modely)),include.lowest=FALSE,right=TRUE,label=c(as.character(seq(1,(length(seq(1,(lengths),modely))-1),1))))
행<-seq(1,col,1)
열<-seq(1,length(seq(1,(lengths),modely)),1)
chip<-merge(행,열)
names(chip)<-c("ncol","nrow")
chip1 <- merge(chip,Xsimulation_v1,by =c("ncol","nrow"),all.x = TRUE)
전체chip수량<-(col*length(seq(1,(lengths),modely)))
수율<-sum(is.na(chip1$camerano))/(col*length(seq(1,(lengths),modely)))*100
chip1<-mutate(chip1,마킹수율= ifelse(is.na(chip1$camerano),1,0))
열별수율<-data.frame(
chip1%>%
group_by(ncol)%>%
summarise( 수량=length(seq(1,(lengths),modely)),
수율=sum(마킹수율)/length(seq(1,(lengths),modely))*100   ))
열별수율<-rbind(열별수율,data.frame(열=c("총합"),재단수량=sum(열별수율$재단수량),수율=(sum(열별수율$양품량)/sum(열별수율$재단수량)*100),양품량=sum(열별수율$양품량) ))
rbind(열별수율,data.frame(열=c("총합"),재단수량=sum(열별수율$재단수량),수율=(sum(열별수율$양품량)/sum(열별수율$재단수량)*100),양품량=sum(열별수율$양품량) ))
열별수율<-rbind(열별수율,(data.frame(열=c("총합"),재단수량=sum(열별수율$재단수량),수율=(sum(열별수율$양품량)/sum(열별수율$재단수량)*100),양품량=sum(열별수율$양품량) )))
열별수율
names(열별수율)<-c("열","재단수량","수율")
열별수율
열별수율<-mutate(열별수율,수율=(열별수율$재단수량*열별수율$수율/100))
열별수율
열별수율<-mutate(열별수율,양품량=(열별수율$재단수량*열별수율$수율/100))
열별수율
열별수율<-rbind(열별수율,(data.frame(열=c("총합"),재단수량=sum(열별수율$재단수량),
수율=(sum(열별수율$양품량)/sum(열별수율$재단수량)*100),
양품량=sum(열별수율$양품량) )))
열별수율
열별수율<-data.frame(
chip1%>%
group_by(ncol)%>%
summarise( 수량=length(seq(1,(lengths),modely)),
수율=sum(마킹수율)/length(seq(1,(lengths),modely))*100   ))
names(열별수율)<-c("열","재단수량","수율")
열별수율<-mutate(열별수율,양품량=(열별수율$재단수량*열별수율$수율/100))
열별수율<-rbind(열별수율,(data.frame(열=c("총합"),재단수량=sum(열별수율$재단수량),
수율=(sum(열별수율$양품량)/sum(열별수율$재단수량)*100),
양품량=sum(열별수율$양품량) )))
열별수율
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
shiny::runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
shiny::runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
library(readr)
example <- read_csv("D:/#.Secure Work Folder/example.csv",
locale = locale())
View(example)
POP <- read_csv("D:/#.Secure Work Folder/example.csv")
names(POP)<-c("LOT이름","PROD_CD","PROD_NM","길이","E")
POP
POP <- read_csv("D:/#.Secure Work Folder/example.csv",head=FALSE)
names(POP)<-c("LOT이름","PROD_CD","PROD_NM","길이","E")
POP <- read_csv("D:/#.Secure Work Folder/example.csv", head=FALSE)
POP
POP <- read_csv("D:/#.Secure Work Folder/example.csv", colnames=FALSE)
POP
POP <- read_csv("D:/#.Secure Work Folder/example.csv", Encoding="UNKNOWN")
library(readxl)
example <- read_excel("D:/#.Secure Work Folder/example.xlsx")
View(example)
POP <- read_excel("D:/#.Secure Work Folder/example.xlsx")
DAS<- function(a){
hdb <-odbcConnect(dsn="DAS",uid = "sa", pwd = "@admin123")
quary<- paste("SELECT a.REMARK, b.UNIQUE_LOT_NO, RECORD_NO, FAULT_YPOS, CAMERA_NO, FAULT_XPOS, MAX_SIZE, MIN_SIZE, V_VLAUE, DEFECT_TYPE_CODE, INSPEC_PROD_NO, PRODUCT_LEN, PROD_WC_CD, INSPEC_STATUS from LAS_DATA a , LAS_MASTER b WITH (NOLOCK) where a.IDN = b.IDN and b.UNIQUE_LOT_NO in ('",a,"')",sep="")
RAW<-sqlQuery(hdb,quary)
quary <-"SELECT * FROM MASTER_CODE where MASTER_CODE.CODE_CLASS = '29'"
Code <- sqlQuery(hdb,quary)
Code<-Code[,2:5]
start<-as.numeric(paste(substr(unlist(levels(factor(RAW$UNIQUE_LOT_NO))),0,6),"01",sep=""))
end<-as.numeric(paste(substr(unlist(levels(factor(RAW$UNIQUE_LOT_NO))),0,6),"28",sep=""))
PROD_WC_CD<-unlist(levels(factor(RAW$PROD_WC_CD)))
quary <-paste("select * from QA_PARAMETER_MARKING_HIS where QA_PARAMETER_MARKING_HIS.PARAMETER_DATE between '",start, "'and'",end,"' and QA_PARAMETER_MARKING_HIS.WORK_CENTER_ID = '",PROD_WC_CD,"'", sep="")
parameter <- sqlQuery(hdb,quary)
parameter<-subset(parameter,PARAMETER_NAME==unlist(levels(factor(gsub("전수-","",RAW$INSPEC_STATUS)))))
parameter<-(data.frame(names(parameter),unlist(parameter[1,])))
names(parameter)<-c("CODE_DATA","마킹유무")
마킹정보<-merge(Code,parameter,by=c("CODE_DATA"),all.x=TRUE)
마킹정보<-마킹정보[,2:5]
names(마킹정보)<-c("불량명","camerano","강약구분","마킹유무")
마킹정보$camerano<- str_replace(마킹정보$camerano,"크로스1","크로스")
마킹정보$마킹유무<-ifelse(마킹정보$마킹유무==1,"Y","N")
마킹정보$불량명<-as.character(마킹정보$불량명)
names(RAW)<-c("camerano","LOT이름","RECORD","Y.좌표","camera_no","X.좌표","max_size","min_size","Value","불량명code","coating_name","length","Plant","INSPEC_STATUS")
RAW<-subset(RAW,select=c("camerano","LOT이름","Y.좌표","camera_no","X.좌표","max_size","min_size","Value","불량명code"))
RAW$Size <- ((as.numeric(RAW$max_size)+as.numeric(RAW$min_size))/2)
RAW$강약구분<- ifelse(RAW$불량명code <60000 , "강" ,"약")
camerano<-c("크로스2","크로스2","크로스2","크로스2","크로스2","미분투과","정투과","정투과","투영","투영","투영","정반사B","정반사B","정반사A","정반사A","사선경계","사선경계","사선경계","크로스1","크로스1","크로스1","크로스2","크로스2","크로스2","크로스2","크로스2","미분투과","정투과","정투과","투영","투영","투영","정반사B","정반사B","정반사A","정반사A","사선경계","사선경계","사선경계","크로스1","크로스1","크로스1")
강약구분<-c("강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약")
불량명code<-c("257","258","259","769","770","772","1025","1026","1281","1282","1284","1537","1538","1793","1794","2049","2050","2051","2305","2306","2307","65793","65794","65795","66305","66306","66308","66561","66562","66817","66818","66820","67073","67074","67329","67330","67585","67586","67587","67841","67842","67843")
불량명<-c("휘점","쿠닉","군집,S/C","이물","라미눌림","S/C","점이물","선이물","백점","흑점","라인","기포(백)","이물(흑)","기포(백)","이물(흑)","백점","흑점","찍힘","휘점","쿠닉","군집,S/C","휘점","쿠닉","군집,S/C","이물","라미눌림","S/C","점이물","선이물","백점","흑점","라인","기포(백)","이물(흑)","기포(백)","이물(흑)","백점","흑점","찍힘","휘점","쿠닉","군집,S/C")
마킹구분<-data.frame(불량명code,불량명)
마킹구분$불량명<-as.character(마킹구분$불량명)
RAW<-merge(RAW,마킹구분,by =c("불량명code"),all.x=TRUE)
RAW$불량명<- lapply(RAW$불량명, function(x) ifelse(is.na(x),"주기성불량",x))
RAW$불량명<-as.character(RAW$불량명)
RAW<- merge(RAW,마킹정보,by =c("camerano","강약구분","불량명"),all.x = TRUE)
RAW$Size<-as.numeric(RAW$Size)
RAW$Value<-as.numeric(RAW$Value)
RAW<-subset(RAW,select=c("camerano","강약구분","불량명","LOT이름","camera_no","X.좌표","Y.좌표","Size","Value","마킹유무"))
close(hdb)
as.numeric(RAW$Y.좌표)
return(RAW)
}
Yield<-function(data,width,length,TD,MD){
ifelse(count(data) == 0,"Data없음", Yield1(data, width, length, TD, MD))
}
Yield1<-function(data,width,length,TD,MD){
##잘린마킹
좌상<-data
좌상$X.좌표<-좌상$X.좌표-12
좌상$Y.좌표<-좌상$Y.좌표+12
우상<-data
우상$X.좌표<-좌상$X.좌표+12
우상$Y.좌표<-좌상$Y.좌표+12
좌하<-data
좌하$X.좌표<-좌상$X.좌표-12
좌하$Y.좌표<-좌상$Y.좌표-12
우하<-data
우하$X.좌표<-좌상$X.좌표+12
우하$Y.좌표<-좌상$Y.좌표-12
data<-rbind(좌상,좌하,우상,우하)
data<-subset(data,마킹유무=='Y')
######정구조열관련 (건들지 마시오)
length<-length*1000
col<-width%/%TD
Null<-(width-TD*col)/2
seqx<-seq(Null,width-Null,TD)
data$col<-cut(data$X.좌표, breaks=c(0,seqx,width), label=c("Null1",seq(1,col,1),"Null2"))
######정구조행관련 (건들지 마시오)
row<-length%/%MD
seqy<-seq(0,length,MD)
data$row<-cut(data$Y.좌표, breaks=seqy, label=c(seq(1,row,1)))
##Chip, 행열매칭
chip<-merge(seq(1,col,1), seq(1,row,1))
names(chip)<-c("col","row")
##수율 및 현황  (sum(is.na(chip$camerano)) ->> 양품량임)
RAW6<-data %>% group_by (col,row) %>% summarise(count=n())
chip3<-merge(chip,RAW6, by=c("col","row"), all.x=TRUE)
defect<-round(sum(is.na(chip3$count))/(col*row)*100, digits = 2)
return(defect)
}
lot <- unlist(unique(subset(POP, select=c("LOT이름"))))
length <- unlist(unique(subset(POP, select=c("길이"))))
POP <- read_excel("D:/#.Secure Work Folder/example.xlsx")
names(POP)<-c("LOT이름","PROD_CD","PROD_NM","길이","E")
DAS<- function(a){
hdb <-odbcConnect(dsn="DAS",uid = "sa", pwd = "@admin123")
quary<- paste("SELECT a.REMARK, b.UNIQUE_LOT_NO, RECORD_NO, FAULT_YPOS, CAMERA_NO, FAULT_XPOS, MAX_SIZE, MIN_SIZE, V_VLAUE, DEFECT_TYPE_CODE, INSPEC_PROD_NO, PRODUCT_LEN, PROD_WC_CD, INSPEC_STATUS from LAS_DATA a , LAS_MASTER b WITH (NOLOCK) where a.IDN = b.IDN and b.UNIQUE_LOT_NO in ('",a,"')",sep="")
RAW<-sqlQuery(hdb,quary)
quary <-"SELECT * FROM MASTER_CODE where MASTER_CODE.CODE_CLASS = '29'"
Code <- sqlQuery(hdb,quary)
Code<-Code[,2:5]
start<-as.numeric(paste(substr(unlist(levels(factor(RAW$UNIQUE_LOT_NO))),0,6),"01",sep=""))
end<-as.numeric(paste(substr(unlist(levels(factor(RAW$UNIQUE_LOT_NO))),0,6),"28",sep=""))
PROD_WC_CD<-unlist(levels(factor(RAW$PROD_WC_CD)))
quary <-paste("select * from QA_PARAMETER_MARKING_HIS where QA_PARAMETER_MARKING_HIS.PARAMETER_DATE between '",start, "'and'",end,"' and QA_PARAMETER_MARKING_HIS.WORK_CENTER_ID = '",PROD_WC_CD,"'", sep="")
parameter <- sqlQuery(hdb,quary)
parameter<-subset(parameter,PARAMETER_NAME==unlist(levels(factor(gsub("전수-","",RAW$INSPEC_STATUS)))))
parameter<-(data.frame(names(parameter),unlist(parameter[1,])))
names(parameter)<-c("CODE_DATA","마킹유무")
마킹정보<-merge(Code,parameter,by=c("CODE_DATA"),all.x=TRUE)
마킹정보<-마킹정보[,2:5]
names(마킹정보)<-c("불량명","camerano","강약구분","마킹유무")
마킹정보$camerano<- str_replace(마킹정보$camerano,"크로스1","크로스")
마킹정보$마킹유무<-ifelse(마킹정보$마킹유무==1,"Y","N")
마킹정보$불량명<-as.character(마킹정보$불량명)
names(RAW)<-c("camerano","LOT이름","RECORD","Y.좌표","camera_no","X.좌표","max_size","min_size","Value","불량명code","coating_name","length","Plant","INSPEC_STATUS")
RAW<-subset(RAW,select=c("camerano","LOT이름","Y.좌표","camera_no","X.좌표","max_size","min_size","Value","불량명code"))
RAW$Size <- ((as.numeric(RAW$max_size)+as.numeric(RAW$min_size))/2)
RAW$강약구분<- ifelse(RAW$불량명code <60000 , "강" ,"약")
camerano<-c("크로스2","크로스2","크로스2","크로스2","크로스2","미분투과","정투과","정투과","투영","투영","투영","정반사B","정반사B","정반사A","정반사A","사선경계","사선경계","사선경계","크로스1","크로스1","크로스1","크로스2","크로스2","크로스2","크로스2","크로스2","미분투과","정투과","정투과","투영","투영","투영","정반사B","정반사B","정반사A","정반사A","사선경계","사선경계","사선경계","크로스1","크로스1","크로스1")
강약구분<-c("강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약")
불량명code<-c("257","258","259","769","770","772","1025","1026","1281","1282","1284","1537","1538","1793","1794","2049","2050","2051","2305","2306","2307","65793","65794","65795","66305","66306","66308","66561","66562","66817","66818","66820","67073","67074","67329","67330","67585","67586","67587","67841","67842","67843")
불량명<-c("휘점","쿠닉","군집,S/C","이물","라미눌림","S/C","점이물","선이물","백점","흑점","라인","기포(백)","이물(흑)","기포(백)","이물(흑)","백점","흑점","찍힘","휘점","쿠닉","군집,S/C","휘점","쿠닉","군집,S/C","이물","라미눌림","S/C","점이물","선이물","백점","흑점","라인","기포(백)","이물(흑)","기포(백)","이물(흑)","백점","흑점","찍힘","휘점","쿠닉","군집,S/C")
마킹구분<-data.frame(불량명code,불량명)
마킹구분$불량명<-as.character(마킹구분$불량명)
RAW<-merge(RAW,마킹구분,by =c("불량명code"),all.x=TRUE)
RAW$불량명<- lapply(RAW$불량명, function(x) ifelse(is.na(x),"주기성불량",x))
RAW$불량명<-as.character(RAW$불량명)
RAW<- merge(RAW,마킹정보,by =c("camerano","강약구분","불량명"),all.x = TRUE)
RAW$Size<-as.numeric(RAW$Size)
RAW$Value<-as.numeric(RAW$Value)
RAW<-subset(RAW,select=c("camerano","강약구분","불량명","LOT이름","camera_no","X.좌표","Y.좌표","Size","Value","마킹유무"))
close(hdb)
as.numeric(RAW$Y.좌표)
return(RAW)
}
Yield<-function(data,width,length,TD,MD){
ifelse(count(data) == 0,"Data없음", Yield1(data, width, length, TD, MD))
}
Yield1<-function(data,width,length,TD,MD){
##잘린마킹
좌상<-data
좌상$X.좌표<-좌상$X.좌표-12
좌상$Y.좌표<-좌상$Y.좌표+12
우상<-data
우상$X.좌표<-좌상$X.좌표+12
우상$Y.좌표<-좌상$Y.좌표+12
좌하<-data
좌하$X.좌표<-좌상$X.좌표-12
좌하$Y.좌표<-좌상$Y.좌표-12
우하<-data
우하$X.좌표<-좌상$X.좌표+12
우하$Y.좌표<-좌상$Y.좌표-12
data<-rbind(좌상,좌하,우상,우하)
data<-subset(data,마킹유무=='Y')
######정구조열관련 (건들지 마시오)
length<-length*1000
col<-width%/%TD
Null<-(width-TD*col)/2
seqx<-seq(Null,width-Null,TD)
data$col<-cut(data$X.좌표, breaks=c(0,seqx,width), label=c("Null1",seq(1,col,1),"Null2"))
######정구조행관련 (건들지 마시오)
row<-length%/%MD
seqy<-seq(0,length,MD)
data$row<-cut(data$Y.좌표, breaks=seqy, label=c(seq(1,row,1)))
##Chip, 행열매칭
chip<-merge(seq(1,col,1), seq(1,row,1))
names(chip)<-c("col","row")
##수율 및 현황  (sum(is.na(chip$camerano)) ->> 양품량임)
RAW6<-data %>% group_by (col,row) %>% summarise(count=n())
chip3<-merge(chip,RAW6, by=c("col","row"), all.x=TRUE)
defect<-round(sum(is.na(chip3$count))/(col*row)*100, digits = 2)
return(defect)
}
lot <- unlist(unique(subset(POP, select=c("LOT이름"))))
length <- unlist(unique(subset(POP, select=c("길이"))))
func = function(lot, length, width, TD, MD) {
AAS <- Yield(data=data.frame(DAS(a=lot)),width=width,length=length,TD=TD,MD=MD)
return(AAS)
}
AAAA<-cbind(POP$LOT이름,data.frame(mapply(func, lot = lot, length = length, width=1300, TD=131.5, MD=66.4)))
write.csv(AA,"C:/Users/lg/Desktop/AAA.csv")
View(AAAA)
names(AAAA)<-c("LOT","Yield")
data<-setdiff(AAAA,subset(AAAA, AAAA$Yield=="Data없음"))
plot_ly(data, x = ~LOT, y = ~Yield, type = 'scatter', mode = 'lines+markers')
AAAA<-cbind(POP$LOT이름,data.frame(mapply(func, lot = lot, length = length, width=1300, TD=400, MD=300)))
names(AAAA)<-c("LOT","Yield")
data<-setdiff(AAAA,subset(AAAA, AAAA$Yield=="Data없음"))
plot_ly(data, x = ~LOT, y = ~Yield, type = 'scatter', mode = 'lines+markers')
install.packages("shiny")
install.packages("shiny")
shiny::runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
library(readr)
library(readxl)
library(ggplot2)
library(stringr)
library(ggthemes)
library(plotly)
library(RODBC)
library(manipulate)
library(MASS)
library(dplyr)
library(reshape2)
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
runApp('D:/#.Secure Work Folder/공부/Rstudio')
hdb <- odbcConnect(dsn="DASNJ",uid = "sa", pwd = "LGchem03")
quary <- "SELECT *   from sys.tables"
RAW<-sqlQuery(hdb,quary)
close(hdb)
View(RAW)
runApp('D:/#.Secure Work Folder/공부/Rstudio')
shiny::runApp('D:/#.Secure Work Folder/공부/Rstudio')
a<-"('20170317CC03024')"
a1<-data.frame(DASconnect1(a))
DASconnect1<-function(a){
hdb <- odbcConnect(dsn="DAS",uid = "sa", pwd = "@admin123")
quary <- paste("SELECT a.REMARK, b.UNIQUE_LOT_NO,	RECORD_NO,	FAULT_YPOS,	CAMERA_NO,	FAULT_XPOS,	MAX_SIZE,	MIN_SIZE,	V_VLAUE,	DEFECT_TYPE_CODE,	INSPEC_PROD_NO,	PRODUCT_LEN,	PROD_WC_CD,	INSPEC_STATUS from LAS_DATA a , LAS_MASTER b WITH (NOLOCK) where a.IDN = b.IDN and b.UNIQUE_LOT_NO in",a)
RAW<-sqlQuery(hdb,quary)
quary <-"SELECT * FROM MASTER_CODE where MASTER_CODE.CODE_CLASS = '29'"
Code <- sqlQuery(hdb,quary)
Code<-Code[,2:5]
start<-as.numeric(substr(unlist(levels(factor(RAW$UNIQUE_LOT_NO))),0,8))
end<-as.numeric(substr(unlist(levels(factor(RAW$UNIQUE_LOT_NO))),0,8))+2
PROD_WC_CD<-unlist(levels(factor(RAW$PROD_WC_CD)))
quary <-paste("select * from QA_PARAMETER_MARKING_HIS where QA_PARAMETER_MARKING_HIS.PARAMETER_DATE between '",start, "'and'",end,"' and QA_PARAMETER_MARKING_HIS.WORK_CENTER_ID = '",PROD_WC_CD,"'", sep="")
parameter <- sqlQuery(hdb,quary)
close(hdb)
parameter<-subset(parameter,PARAMETER_NAME==unlist(levels(factor(gsub("전수-","",RAW$INSPEC_STATUS)))))
parameter<-(data.frame(names(parameter),unlist(parameter[1,])))
names(parameter)<-c("CODE_DATA","마킹유무")
마킹정보<-merge(Code,parameter,by=c("CODE_DATA"),all.x=TRUE)
마킹정보<-마킹정보[,2:5]
names(마킹정보)<-c("불량명","camerano","강약구분","마킹유무")
마킹정보$camerano<- str_replace(마킹정보$camerano,"크로스1","크로스")
마킹정보$마킹유무<-ifelse(마킹정보$마킹유무==1,"Y","N")
마킹정보$불량명<-as.character(마킹정보$불량명)
names(RAW)<-c("camerano","LOT이름","RECORD","Y.좌표","camera_no","X.좌표","max_size","min_size","Value","불량명code","coating_name","length","Plant","INSPEC_STATUS")
RAW<-subset(RAW,select=c("camerano","LOT이름","Y.좌표","camera_no","X.좌표","max_size","min_size","Value","불량명code"))
RAW$Size <- ((as.numeric(RAW$max_size)+as.numeric(RAW$min_size))/2)
RAW$강약구분<- ifelse(RAW$불량명code <60000 , "강" ,"약")
camerano<-c("크로스2","크로스2","크로스2","크로스2","크로스2","미분투과","정투과","정투과","투영","투영","투영","정반사B","정반사B","정반사A","정반사A","사선경계","사선경계","사선경계","크로스1","크로스1","크로스1","크로스2","크로스2","크로스2","크로스2","크로스2","미분투과","정투과","정투과","투영","투영","투영","정반사B","정반사B","정반사A","정반사A","사선경계","사선경계","사선경계","크로스1","크로스1","크로스1")
강약구분<-c("강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","강","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약","약")
불량명code<-c("257","258","259","769","770","772","1025","1026","1281","1282","1284","1537","1538","1793","1794","2049","2050","2051","2305","2306","2307","65793","65794","65795","66305","66306","66308","66561","66562","66817","66818","66820","67073","67074","67329","67330","67585","67586","67587","67841","67842","67843")
불량명<-c("휘점","쿠닉","군집,S/C","이물","라미눌림","S/C","점이물","선이물","백점","흑점","라인","기포(백)","이물(흑)","기포(백)","이물(흑)","백점","흑점","찍힘","휘점","쿠닉","군집,S/C","휘점","쿠닉","군집,S/C","이물","라미눌림","S/C","점이물","선이물","백점","흑점","라인","기포(백)","이물(흑)","기포(백)","이물(흑)","백점","흑점","찍힘","휘점","쿠닉","군집,S/C")
마킹구분<-data.frame(불량명code,불량명)
마킹구분$불량명<-as.character(마킹구분$불량명)
RAW<-merge(RAW,마킹구분,by =c("불량명code"),all.x=TRUE)
RAW$불량명<- lapply(RAW$불량명, function(x) ifelse(is.na(x),"주기성불량",x))
RAW$불량명<-as.character(RAW$불량명)
RAW<- merge(RAW,마킹정보,by =c("camerano","강약구분","불량명"),all.x = TRUE)
RAW$Size<-as.numeric(RAW$Size)
RAW$Value<-as.numeric(RAW$Value)
RAW<- subset(RAW,select=c("camerano","강약구분","불량명","LOT이름","camera_no","X.좌표","Y.좌표","Size","Value","마킹유무"))
return(RAW)
}  ##  Lot 입력  a<-"('20170111CC01017')" 간소화(가벼움)
a<-"('20170317CC03024')"
a1<-data.frame(DASconnect1(a))
ggplotly(
ggplot(data=subset(a1,마킹유무=="Y"),aes(x=X.좌표,y=Y.좌표/1000,color=camerano))+geom_point(aes(shape=마킹유무))
+facet_grid(. ~ LOT이름)
)
{
library(readr)
library(readxl)
library(ggplot2)
library(stringr)
library(ggthemes)
library(plotly)
library(RODBC)
library(manipulate)
library(MASS)
library(dplyr)
library(reshape2)
} ##library
ggplotly(
ggplot(data=subset(a1,마킹유무=="Y"),aes(x=X.좌표,y=Y.좌표/1000,color=camerano))+geom_point(aes(shape=마킹유무))
+facet_grid(. ~ LOT이름)
)
ggplotly(
ggplot(data=a1,aes(x=X.좌표,y=Y.좌표/1000,color=camerano))+geom_point(aes(shape=마킹유무))
+facet_grid(. ~ LOT이름)
)
runApp('D:/#.Secure Work Folder/공부/Rstudio')
install.packages("rsconnect")
library(rsconnect)
library(rsconnect)
rsconnect::setAccountInfo(name='choichoecuttingmap',
token='85EF1324CA40F7F9CDF3DEC93C868FD9',
secret='<SECRET>')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
rsconnect::deployApp('D:\#.Secure Work Folder\공부\map')
rsconnect::deployApp('D:\#.Secure Work Folder\공부\map')
rsconnect::deployApp('D:/#.Secure Work Folder\공부\map')
rsconnect::deployApp('D:/#.Secure Work Folder/공부/map')
rsconnect::deployApp('D:/#.Secure Work Folder/공부/map')
rsconnect::setAccountInfo(name='choichoecuttingmap',
token='85EF1324CA40F7F9CDF3DEC93C868FD9',
secret='<SECRET>')
rsconnect::setAccountInfo(name='choichoecuttingmap', token='85EF1324CA40F7F9CDF3DEC93C868FD9', secret='7zhJ0wxRey68JOym+5J2FFkHqXxtjOjCUfHj7JBn')
library(rsconnect)
rsconnect::deployApp('D:/#.Secure Work Folder/공부/map')
rsconnect::deployApp('D:/#.Secure Work Folder/공부/map')
runApp('D:/#.Secure Work Folder/map')
library(rsconnect)
library(rsconnect)
library(rsconnect)
rsconnect::setAccountInfo(name='choichoecuttingmap', token='85EF1324CA40F7F9CDF3DEC93C868FD9', secret='7zhJ0wxRey68JOym+5J2FFkHqXxtjOjCUfHj7JBn')
setwd("~/")
setwd("D:/#.Secure Work Folder/map")
rsconnect::setAccountInfo(name='choichoecuttingmap', token='85EF1324CA40F7F9CDF3DEC93C868FD9', secret='7zhJ0wxRey68JOym+5J2FFkHqXxtjOjCUfHj7JBn')
